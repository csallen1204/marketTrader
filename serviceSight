#!/usr/bin/python3


import json, socket

with open('settings.json', 'r') as file:
    settingsString = file.read()
    global settingsJSON
    settingsJSON = json.loads(settingsString)

def subSettings(microservice):
    print("")
    print("Warning: Please be sure to verify and enter the address and port of the")
    print("microservice carefully as entering incorrect information will cause it to")
    print("be unavailable to the application until it is corrected")
    print("")
    print(f"{microservice} settings:")
    print(f"1) Address (Current Value: {settingsJSON[microservice]['address']})")
    print(f"2) Port (Current Value: {settingsJSON[microservice]['port']})")
    print(f"3) Help")
    print(f"4) Return to Settings Menu")
    cmdInput = input()
    keepLoopGoing = 0
    while keepLoopGoing < 1:
        if cmdInput == '1':
            originalAddress = settingsJSON[microservice]['address']
            print("Enter new address:")
            newAddress = input()
            print(f"Overwrite old address '{settingsJSON[microservice]['address']}' new address '{newAddress}'? (Enter Y or N)")
            decision = input()
            while decision not in ('Y','N'):
                print("Please enter Y or N")
                decision = input()
            if decision == 'N':
                break
            settingsJSON[microservice]['address'] = newAddress
            with open('settings.json', 'w') as file:
                json.dump(settingsJSON, file)
            print("")
            print("Address was saved. Refresh status to check new address")
            print("")
            break
        elif cmdInput == '2':
            originalAddress = settingsJSON[microservice]['port']
            print("Enter new port:")
            newPort = input()
            print(f"Overwrite old port '{settingsJSON[microservice]['port']}' new port '{newPort}'? (Enter Y or N)")
            decision = input()
            while decision not in ('Y','N'):
                print("Please enter Y or N")
                decision = input()
            if decision == 'N':
                break
            settingsJSON[microservice]['port'] = int(newPort)
            with open('settings.json', 'w') as file:
                json.dump(settingsJSON, file)
            print("")
            print("Port was saved. Refresh status to check new port")
            print("")
            break
        elif cmdInput == '3':
            print("From this menu you can change the existing configuration settings")
        elif cmdInput == '4':
            break


def settings():
    keepLoopGoing = 0
    while keepLoopGoing < 1:
        print('Settings:')
        print("1) rabbitMQ")
        print("2) mongoDB")
        print("3) Disable/Enable Service Status at Startup")
        print("4) Help")
        print("5) Return to Main Menu")
        settingsEntry = input()
        if settingsEntry == '1':
            subSettings('rabbitMQ')
            continue
        elif settingsEntry == '2':
            subSettings('mongoDB')
            continue
        elif settingsEntry == '3':
            if settingsJSON['refreshOnStartup'] == 0:
                setting = 'OFF'
            else:
                setting = 'ON'
            print(f"Current Setting: {setting}")
            print("")
            print("Change? Y/N")
            response = input()
            while response not in ('Y','N'):
                print("Please type Y or N")
                response = input()
            if response == 'Y':
                if settingsJSON['refreshOnStartup'] == 0:
                    settingsJSON['refreshOnStartup'] = 1
                else:
                    settingsJSON['refreshOnStartup'] = 0
                with open('settings.json', 'w') as file:
                    json.dump(settingsJSON, file)
            break
        elif settingsEntry == '4':
            print("")
            print("Settings Options:")
            print("1) Change configuration settings for RabbitMQ")
            print("2) Change configuration settings for mongoDB")
            print("3) Choose to enable/disable service status at startup")
            print("4) Launch the help menu")
            print("5) Return to the Main Menu")
            print("")
            continue
        elif settingsEntry == '5':
            keepLoopGoing += 1
            break
        print("Unknown option. Please Try Again")
        print("")
        

def helpMenu():
    print("Options:")
    print("Status: Shows the current status of each application component")
    print("Refresh Status: Refreshes the status of the component view to see if there is any change")
    print("Settings: Section to change configuration settings for the application")
    print("")
    print("Press enter to continue")
    input()

def getStatus():
    print("")
    print("Microservice Status:")
    for key in settingsJSON.keys():
        if key == 'refreshOnStartup':
            continue
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((settingsJSON[key]['address'],settingsJSON[key]['port']))
        if result == 0:
            print(f"{key}: ONLINE")
        else:
            print(f"{key}: OFFLINE")
        
    print("")

def mainMenu():
    print("Menu:")
    print("1) Refresh Status")
    print("2) Settings")
    print("3) Help")
    print("4) Exit")

def main():
    print('SERVER SIGHT')
    print("Version 1.01")
    print("---------------------------------------")
    print("A program to keep sight of your microservices")
    print("---------------------------------------")
    print("What's New:")
    print("-Status: Allows you to verify all of the components are up and running without having to check them individually")
    if settingsJSON['refreshOnStartup'] == 0:
        print(" NOTE: Status feature is currently disabled to run at startup but this can be changed in the settings menu")
    print("-Settings: Allows you to change server settings")
    print("")
    entry = None
    if settingsJSON['refreshOnStartup'] == 1:
        getStatus()
        print("NOTE: Status refresh could take up to a minute to contact remote services")
        print("You can disable this feature from running at startup in the Settings Menu")
    while True:
        print("")
        mainMenu()
        entry = input()
        while entry:
            if entry == '1':
                getStatus()
                break
            elif entry == '2':
                settings()
                break
            elif entry == '3':
                helpMenu()
                break
            elif entry == '4':
                quit()
            print("Unknown Option. Please try again:")
            entry = input()
if __name__ == "__main__":
    main()